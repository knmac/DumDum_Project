package fr.eurecom.dumdumgame;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.LinkedList;

import fr.eurecom.allmenus.*;
import fr.eurecom.data.User;
import fr.eurecom.engine.Game;
import fr.eurecom.utility.DataReader;
import fr.eurecom.utility.DataWriter;
import fr.eurecom.utility.Helper;
import fr.eurecom.utility.Parameters;
import android.support.v7.app.ActionBarActivity;
import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.graphics.Rect;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.view.Display;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MenuItem;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;

public class MainActivity extends ActionBarActivity {

	// --------------------------------------------------------------------------
	// System variables
	private RelativeLayout mainLayout;
	private MyView mainView;
	private int timeInterval = 40; // what is that, check later
	private boolean timerOn;

	// --------------------------------------------------------------------------
	// Game variables
	private MainMenu mainMenu;
	private HelpMenu helpMenu;
	private UserMenu userMenu;
	private HighScoreMenu highScoreMenu;
	private StartMenu startMenu;
	private LoadMenu loadMenu;
	private PauseMenu pauseMenu;
//	
	private LinkedList<User> userList = new LinkedList<User>();
	
//	private Game game;
	private MssgBox mssgBox;
//	private CongratBox congratBox;

	private MediaPlayer spMenu;
	private MediaPlayer spBackground;
	private MediaPlayer spVictory;
	private boolean soundOn = true;

	private String currentUserName;
	private int chosenLevel;
	
	private Game game;
	private Object gameActivity;
	
	private Point size;

	public enum StateList {
		MAIN_MENU, USER_MENU, HIGH_SCORE_MENU, HELP_MENU, START_MENU, LOAD_MENU, PAUSE_MENU, GAME, MSSG_BOX, CONGRAT_BOX
	}

	private StateList state = StateList.MAIN_MENU;

	private Bitmap screenShot = null;
	private boolean isWallThroughAllowed = false;

	// --------------------------------------------------------------------------
	// Private methods
	private void CreateMenus() {
		mainMenu = new MainMenu(new DynamicBitmap(Parameters.bmpBkMainMenu,
				new Point(0, 0), 0, size.x, size.y));

		helpMenu = new HelpMenu(new DynamicBitmap(Parameters.bmpBkSubMenu,
				new Point(0, 0), 0, size.x, size.y));

		userMenu = new UserMenu(new DynamicBitmap(Parameters.bmpBkSubMenu,
				new Point(0, 0), 0, size.x, size.y), userList);

		highScoreMenu = new HighScoreMenu(
				new DynamicBitmap(Parameters.bmpBkSubMenu, new Point(0, 0),
						0, size.x, size.y), userList);

		startMenu = new StartMenu(new DynamicBitmap(Parameters.bmpBkSubMenu,
				new Point(0, 0), 0, size.x, size.y), this);

//		try {
//			loadMenu = new LoadMenu(new DynamicBitmap(
//					Parameters.bmpBkSubMenu, new Point(0, 0), 0, _width,
//					_height), getCurrentUser().getUnlockedLevel());
//		} catch (Exception e1) {
//			e1.printStackTrace();
//		}

//		pauseMenu = new PauseMenu(new DynamicBitmap(
//				Parameters.bmpBtnTransparent, new Point(0, 0), 0, _width,
//				_height));

		int tmp;
		tmp = (size.y - Parameters.bmpMssgBox.getHeight()) / 2;
//		mssgBox = new MssgBox(new DynamicBitmap(Parameters.bmpMssgBox,
//				new Point(0, tmp)));
//
//		congratBox = new CongratBox(new DynamicBitmap(Parameters.bmpCongrat,
//				new Point(0, 0), 0, _width, _height), this);
	}

	// --------------------------------------------------------------------------
	// Public methods    
	 
    public StateList getState() {
		return state;
	}
    
    public void setState(StateList state) {
		this.state = state;
	}
    
    public int getChosenLevel() {
		return chosenLevel;
	}
    public void setChosenLevel(int chosenLevel) {
		this.chosenLevel = chosenLevel;
	}
    
    public String getCurrentUserName() {
		return currentUserName;
	}
    
    public void setCurrentUserName(String currentUserName) {
		this.currentUserName = currentUserName;
	}
    
    public LinkedList<User> getUserList() {
		return userList;
	}
    
    
    public void setUserList(LinkedList<User> userList) {
		this.userList = userList;
	}
    
    public MssgBox getMssgBox() {
		return mssgBox;
	}
    
    public PauseMenu getPauseMenu() {
		return pauseMenu;
	}
    
    public void setPauseMenu(PauseMenu pauseMenu) {
		this.pauseMenu = pauseMenu;
	}
    
    
    public void captureTheScreen() {
		screenShot = Helper.getScreenShot(screenShot, mainView);
	}
	
	public MyView getMainView() {
		return mainView;
	}
	
	public Game getGame() {
		return game;
	}
	
	public void initGame() {
        game = new Game(gameActivity);
    }
    
    
    public void switchSoundOnOff() {
        soundOn = !soundOn;
    }
    
	public void shutdownApp() {
		DataWriter.WriteData(userList, Parameters.pthData, currentUserName);
		flushSound();
		timerOn = false;
		if (screenShot != null) {
			screenShot.recycle();
		}

		System.runFinalizersOnExit(true);
		System.exit(0);
		this.finish();
	}
    
	public void flushSound() {
		if (spMenu != null) {
			if (spMenu.isPlaying())
				spMenu.stop();
			spMenu.release();
			spMenu = null;
		}

		if (spBackground != null) {
			if (spBackground.isPlaying())
				spBackground.stop();
			spBackground.release();
			spBackground = null;
		}

		if (spVictory != null) {
			if (spVictory.isPlaying())
				spVictory.stop();
			spVictory.release();
			spVictory = null;
		}
	}
	
	public User getCurrentUser() {
        for (int i = 0; i < userList.size(); ++i)
        {
            if (userList.get(i).getName().contentEquals(this.currentUserName))
                return userList.get(i);
        }
        return null;               
    } 
	
    
    
	public void updateContent() throws Exception {
    	userMenu.SpawnUserButton();
    	highScoreMenu.FindTotalScore(userList);
    	loadMenu.SpawnLevel(getCurrentUser().getUnlockedLevel());
    } 
    
	public boolean isWallThroughAllowed() {
    	return this.isWallThroughAllowed;
    }
	
	// --------------------------------------------------------------------------
	// Override methods
	@SuppressLint("NewApi")
	// ignore 'mainDisplay.getSize(size);' for API less than 13
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Make activity full-screen
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		getWindow().clearFlags(
				WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
		setContentView(R.layout.activity_main);

		// Get the main layout (self-defined) and add a view to it
		// add id from activity_main.xml --> R.id.mainLayout
		mainLayout = (RelativeLayout) findViewById(R.id.mainLayout);
		mainView = new MyView(this);
		mainLayout.addView(mainView);
		mainView.bringToFront();

		// Initialize system
		App.setMyContext(this);
		Display mainDisplay = getWindowManager().getDefaultDisplay();
		size = new Point();
		mainDisplay.getSize(size);
		try {
			Parameters.initParameters(new Rect(0, 0, size.x, size.y),
					timeInterval);
		} catch (Exception e2) {
			e2.printStackTrace();
		}

		// If internally stored file exists, read that file
		try {
			FileInputStream fin = openFileInput(Parameters.pthData);
			fin.close();
			currentUserName = DataReader.ReadData(userList, Parameters.pthData);
		} catch (FileNotFoundException e2) {
			int tmp = Parameters.dDataID;
			currentUserName = DataReader.ReadRawData(userList, tmp);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Create menus
		CreateMenus();

		// Load sound track
		spMenu = MediaPlayer.create(this, Parameters.dMenuSoundtrack);
		spBackground = MediaPlayer.create(this,
				Parameters.dBackgroundSoundtrack);
		spVictory = MediaPlayer.create(this, Parameters.dVictorySoundtrack);

		spMenu.setLooping(true);
		spBackground.setLooping(true);
		spVictory.setLooping(false);

		// Timer for the game
		timerOn = true;
		Thread timerThread = new Thread(new Runnable() {
			@Override
			public void run() {
				while (timerOn) {
					// Do a down on the mutex
					try {
						Parameters.mutex.acquire();
					} catch (InterruptedException e1) {
						e1.printStackTrace();
					}

					// Critical region---------------------------------
//					if (state == StateList.LOAD_MENU)
//						mainView.postInvalidate();
//					else if (state == StateList.GAME && game.isRunning())
//						mainView.postInvalidate();
					// ----------------------------------------------

					// Do an up on the mutex
					Parameters.mutex.release();

					try {
						Thread.sleep(40);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		});
		timerThread.setPriority(Thread.MAX_PRIORITY);
		timerThread.start();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public boolean onKeyUp(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_ENTER) {
//			if (state == StateList.GAME && !game.isBallRunning()) {
//				// Capture the screen
//				captureTheScreen();
//
//				state = StateList.PAUSE_MENU;
//				mainView.invalidate();
//			} else if (state == StateList.PAUSE_MENU) {
//				state = StateList.GAME;
//				game.resume();
//				mainView.invalidate();
//			}
		} else if (keyCode == KeyEvent.KEYCODE_0) {
			isWallThroughAllowed = !isWallThroughAllowed;
		} else if (keyCode == KeyEvent.KEYCODE_9) {
//			if (state == StateList.GAME && game != null) {
//				try {
//					// Do a down on the mutex
//					Parameters.mutex.acquire();
//
//					// Critical region
//					game.levelUp();
//					// ------------------
//
//					// Do an up on the mutex
//					Parameters.mutex.release();
//				} catch (InterruptedException e) {
//					e.printStackTrace();
//				} catch (Exception e) {
//					e.printStackTrace();
//				}
//			}
		}

		return true;
	}

}
